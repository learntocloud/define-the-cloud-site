@page "/{WordSlug}"
@inject HttpClient Http
@inject IConfiguration Configuration
@inject IWebAssemblyHostEnvironment HostEnvironment
@using System.Net
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting

@if (definition == null)
{
    <MudContainer Class="mt-16">
        <MudProgressLinear Color="MudBlazor.Color.Primary" Indeterminate="true" Class="my-4" />
    </MudContainer>
}
else
{

    <MudContainer Class="mt-11">
        <div class="d-flex">

            <MudText Typo="Typo.h2" Align="Align.Left" Class="ml-0 mt-0">@definition.Word.ToLower()</MudText>
            @if (definition.Abbreviation != definition.Word)
            {

                <MudText Typo="Typo.h5" Class="ml-1 mt-5">(@definition.Abbreviation.ToLower())</MudText>
            }
        </div>

        <MudText Typo="Typo.h5" Class="ml-0 mt-1 mb-3">
            <MudLink Href="@($"{definition.Author.Link}")" Color="MudBlazor.Color.Secondary" Underline="Underline.Always">
                @definition.Author.Name</MudLink>
        </MudText>

        <MudText Align="Align.Justify" GutterBottom="true">@definition.Content</MudText>

        <MudText Typo="Typo.h5" Class="ml-0 mt-2 mb-4">
            <MudLink Href="@($"{definition.LearnMoreUrl}")">learn more</MudLink>
        </MudText>



         <MudText Typo="Typo.h5" Align="Align.Left" Class="ml-0 mt-0">Project Idea</MudText>
        <MudText Align="Align.Justify" GutterBottom="true" Class="ml-0 mt-3">@project.Description</MudText>


        <MudDivider DividerType="DividerType.FullWidth" Class="mt-5" />
        <div class="d-flex justify-left">

            <MudText Typo="Typo.h4" Class="ml-1 mt-5" Color="Color.Default"> explore more in the <i>@definition.Tag</i> tag:
            </MudText>

        </div>



        <MudGrid Class="mt-2">


            @foreach (var word in words)
            {
                var wordSlug = WebUtility.UrlEncode(word.Word.Replace("-", "__").Replace(" ", "-"));
                <MudItem xs="12" sm="12" md="12">

                    <MudText Class="my-2" Align="Align.Center" Color="Color.Default">
                        <MudLink Href="@($"/{wordSlug}")" Underline="Underline.Hover" Color="Color.Default" Typo="Typo.h6">
                            @word.Word.ToLower()</MudLink>
                    </MudText>

                </MudItem>
            }
        </MudGrid>




    </MudContainer>
}

@code {
    [Parameter]
    public string? WordSlug { get; set; }
    private WordDefinition[] words;
    private WordDefinition? definition;
    private Project project;

    protected override async Task OnParametersSetAsync()
    {
        var Word = WebUtility.UrlDecode(WordSlug).Replace("-", " ").Replace("__", "-");

        var apiBaseUrl = Configuration["ApiSettings:BaseUrl"];
        var definitionApiKey = Configuration["ApiSettings:DefinitionApiKey"];
        var tagApiKey = Configuration["ApiSettings:TagApiKey"];
        var projectApiKey = Configuration["ApiSettings:ProjectApiKey"];

        definition = await Http.GetFromJsonAsync<WordDefinition>($"{apiBaseUrl}/GetDefinitionByWord?code={definitionApiKey}&word={Word}");

        Root datawords = await Http.GetFromJsonAsync<Root>($"{apiBaseUrl}/GetDefinitionsByTag?code={tagApiKey}&tag={definition?.Tag}&batchSize=5")
            ?? new Root { };

        words = datawords.Data.ToArray();

        project = await Http.GetFromJsonAsync<Project>($"{apiBaseUrl}/GetProjectByWord?code={projectApiKey}&word={Word}");
    }
}