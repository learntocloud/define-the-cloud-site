@page "/{WordSlug}"
@inject HttpClient Http
@inject IConfiguration Configuration
@inject IWebAssemblyHostEnvironment HostEnvironment
@using System.Net
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using System.Net.Http.Headers;


@if (definition == null)
{
    <MudContainer Class="mt-16">
        <MudProgressLinear Color="MudBlazor.Color.Primary" Indeterminate="true" Class="my-4" />
    </MudContainer>
}
else
{

    <MudContainer Class="mt-11">
        <div class="d-flex">

            <MudText Typo="Typo.h2" Align="Align.Left" Class="ml-0 mt-0">@definition.Word.ToLower()</MudText>
            @if (definition.Abbreviation != definition.Word)
            {

                <MudText Typo="Typo.h5" Class="ml-1 mt-5">(@definition.Abbreviation.ToLower())</MudText>
            }
        </div>

        <MudText Typo="Typo.h5" Class="ml-0 mt-1 mb-3">
            <MudLink Href="@($"{definition.Author.Link}")" Color="MudBlazor.Color.Secondary" Underline="Underline.Always">
                @definition.Author.Name</MudLink>
        </MudText>

        <MudText Align="Align.Justify" GutterBottom="true">@definition.Content</MudText>

        <MudText Typo="Typo.h5" Class="ml-0 mt-2 mb-4">
            <MudLink Href="@($"{definition.LearnMoreUrl}")">learn more</MudLink>
        </MudText>

        <MudDivider DividerType="DividerType.FullWidth" Class="mt-5" />

      

       

    </MudContainer>
}

@code {
    [Parameter]
    public string? WordSlug { get; set; }
    private WordDefinition? definition;
    private CloudProjectIdea cloudProjectIdea;

 
protected override async Task OnParametersSetAsync()
    {
    try
    {
        var Word = WebUtility.UrlDecode(WordSlug).Replace("-", " ").Replace("__", "-");



        var apiBaseUrl = Configuration["BaseUrl"];
        var projectGeneratorBaseUrl = Configuration["ProjectGeneratorBaseUrl"];
        var projectGeneratorApiKey = Configuration["ProjectGeneratorApiKey"];
        var definitionApiKey = Configuration["DefinitionApiKey"];
        var tagApiKey = Configuration["TagApiKey"];
        var projectApiKey = Configuration["ProjectApiKey"];

        // GetDefinitionByWord
            var definitionResponse = await Http.GetAsync($"https://definethecloudapi-bwh8aehvcgdgg2fq.eastus2-01.azurewebsites.net/api/GetDefinitionByWord?code=XlXQlgRImEv2tnIt5zldobsLt6fom4B19c4NaA_sEDGaAzFuX45uwg%3D%3D&word={Word}");

            
        if (definitionResponse.IsSuccessStatusCode)
        {
            var content = await definitionResponse.Content.ReadAsStringAsync();
            if (!string.IsNullOrWhiteSpace(content))
            {
                definition = JsonConvert.DeserializeObject<WordDefinition>(content);
            }
            else
            {
                Console.WriteLine("GetDefinitionByWord returned empty content");
            }
        }
        else
        {
            Console.WriteLine($"GetDefinitionByWord failed with status code: {definitionResponse.StatusCode}");
        }

        

     

        
    }
    catch (Exception ex)
    {
        Console.WriteLine($"An error occurred: {ex.Message}");
        // You might want to set an error state here to display to the user
    }
    
}
}   