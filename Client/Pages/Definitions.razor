@page "/definitions"
@inject HttpClient Http


@if (words == null)
{
    <MudContainer Class="mt-16">

    <MudProgressLinear Color="MudBlazor.Color.Primary" Indeterminate="true" Class="my-4" />
</MudContainer>
}
else
{

    <MudContainer Class="mt-16">

    <MudTextField @bind-Value="searchTerm" Placeholder="Search" Adornment="Adornment.Start"
        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"
        @bind-Value:event="TextChanged" Immediate="true"></MudTextField>


    <MudGrid Class="mt-8">
        @foreach (var item in searchResults)
            {
                <MudItem xs="12" sm="6" md="4">


                    <MudCard>
                        <MudCardContent>

                            <MudText Typo="Typo.h6" Class="my-5" Align="Align.Center" Color="Color.Default">
                                <MudLink Href="@($"{item.LearnMoreUrl}")" Underline="Underline.Hover" Typo="Typo.h6" Color="Color.Default">@item.Word</MudLink>
                            </MudText>
                            <MudText Typo="Typo.body1" Class="my-5" Align="Align.Center">@item.Content</MudText>


                            <MudDivider DividerType="DividerType.Middle" Class="my-3" />


                            <MudChip Variant="Variant.Outlined" Color="Color.Secondary">@item.Tag</MudChip>

                        </MudCardContent>
                        <MudCardActions>
                            
                                <MudLink Href="@($"{item.Author.Link}")" Underline="Underline.Hover" Typo="Typo.subtitle1" Color="Color.Primary">Submitted by: @item.Author.Name</MudLink>
                            

                        </MudCardActions>
                    </MudCard>

                </MudItem>
            }
        </MudGrid>
    </MudContainer>

}

@code {
    private WordDefinition[] words;
    private string searchTerm { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            words = await
            Http.GetFromJsonAsync<WordDefinition[]>("https://clouddictionary.azurewebsites.net/api/GetDefinitions?code=NY6FWq01qRLmK19uB84elyyH6AvVeU3ycoe0B641xHL3AzFue4o5gA==")
            ?? new WordDefinition[] { };

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }
    private IEnumerable<WordDefinition> searchResults =>
    words.Where(p => string.IsNullOrEmpty(searchTerm)
    || p.Word.ToLower().Contains(searchTerm.ToLower()) || p.Author.Name.ToLower().Contains(searchTerm.ToLower())
    || p.Tag.ToLower().Contains(searchTerm.ToLower())
    );


}
